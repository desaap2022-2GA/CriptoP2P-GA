# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# GitHub recommends pinning actions to a commit SHA.
# To get a newer version, you will need to update the SHA.
# You can also reference a tag or branch, but the action may change without warning.

name: Java CI

on:
  push:
    branches: [ master, validations ]
  workflow_dispatch:
permissions:
  pull-requests: read # allows SonarCloud to decorate PRs with analysis results

jobs:
  build:
    runs-on: ubuntu-latest
    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres:14
        # Provide the password for postgres
        env:
          POSTGRES_USER: ${{ secrets.DB_USER }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
          POSTGRES_DB: ${{ secrets.DB_NAME }}
          POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
          POSTGRES_PORT: ${{ secrets.DB_PORT }}
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'
          cache: gradle
      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@e6e38bacfdf1a337459f332974bb2327a31aaf4b
      - name: Build with Gradle
        uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
        env:
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
        with:
          arguments: build

  #      - name: Deploy to Heroku
  # You may pin to the exact commit or the version.
  # uses: AkhileshNS/heroku-deploy@79ef2ae4ff9b897010907016b268fd0f88561820
  #        uses: AkhileshNS/heroku-deploy@v3.12.12
  #        with:
  #         heroku_api_key: ${{secrets.HEROKU_API_KEY}}
  #         heroku_email: ${{secrets.HEROKU_EMAIL}}
  #         heroku_app_name: ${{secrets.HEROKU_APP}}
  # This workflow uses actions that are not certified by GitHub.
  # They are provided by a third-party and are governed by
  # separate terms of service, privacy policy, and support
  # documentation.

  # This workflow helps you trigger a SonarCloud analysis of your code and populates
  # GitHub Code Scanning alerts with the vulnerabilities found.
  # Free for open source project.

  # 1. Login to SonarCloud.io using your GitHub account

  # 2. Import your project on SonarCloud
  #     * Add your GitHub organization first, then add your repository as a new project.
  #     * Please note that many languages are eligible for automatic analysis,
  #       which means that the analysis will start automatically without the need to set up GitHub Actions.
  #     * This behavior can be changed in Administration > Analysis Method.
  #
  # 3. Follow the SonarCloud in-product tutorial
  #     * a. Copy/paste the Project Key and the Organization Key into the args parameter below
  #          (You'll find this information in SonarCloud. Click on "Information" at the bottom left)
  #
  #     * b. Generate a new token and add it to your Github repository's secrets using the name SONAR_TOKEN
  #          (On SonarCloud, click on your avatar on top-right > My account > Security
  #           or go directly to https://sonarcloud.io/account/security/)

  # Feel free to take a look at our documentation (https://docs.sonarcloud.io/getting-started/github/)
  # or reach out to our community forum if you need some help (https://community.sonarsource.com/c/help/sc/9)
      - name: Analyze with SonarCloud

    # You can pin the exact commit or the version.
    # uses: SonarSource/sonarcloud-github-action@de2e56b42aa84d0b1c5b622644ac17e505c9a049
        uses: SonarSource/sonarcloud-github-action@de2e56b42aa84d0b1c5b622644ac17e505c9a049
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}   # Generate a token on Sonarcloud.io, add it to the secrets of this repo with the name SONAR_TOKEN (Settings > Secrets > Actions > add new repository secret)
        with:
                     # Additional arguments for the sonarcloud scanner
          args:
                       # Unique keys of your project and organization. You can find them in SonarCloud > Information (bottom-left menu)
                       # mandatory
            -Dsonar.projectKey=desaap2022-2GA
            -Dsonar.organization=desaap2022-2ga
                       # Comma-separated paths to directories containing main source files.
                       #-Dsonar.sources= # optional, default is project base directory
                       # When you need the analysis to take place in a directory other than the one from which it was launched
                       #-Dsonar.projectBaseDir= # optional, default is .
                       # Comma-separated paths to directories containing test source files.
                       #-Dsonar.tests= # optional. For more info about Code Coverage, please refer to https://docs.sonarcloud.io/enriching/test-coverage/overview/
                     # Adds more detail to both client and server-side analysis logs, activating DEBUG mode for the scanner, and adding client-side environment variables and system properties to the server-side log of analysis report processing.
                     #-Dsonar.verbose= # optional, default is false